{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","classNames","completed","title","TodoList","todos","map","userId","usersFromServer","find","users","App","useState","userSelect","setUserSelect","titleInput","setTitleInput","isSubmit","setIsSubmit","action","method","onSubmit","event","preventDefault","selectedUser","maxId","Math","max","push","htmlFor","type","placeholder","value","onChange","target","disabled","selected","ReactDOM","render","document","getElementById"],"mappings":"6MAAe,G,MAAA,CACb,CACEA,GAAI,EACJC,KAAM,gBACNC,SAAU,OACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,eACNC,SAAU,YACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,sBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,6BAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,SACVC,MAAO,4BAET,CACEH,GAAI,EACJC,KAAM,uBACNC,SAAU,mBACVC,MAAO,2BAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,eACVC,MAAO,0BAET,CACEH,GAAI,EACJC,KAAM,2BACNC,SAAU,gBACVC,MAAO,wBAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,WACVC,MAAO,2BAET,CACEH,GAAI,GACJC,KAAM,qBACNC,SAAU,iBACVC,MAAO,4B,uBCpDEC,EAA2B,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACtC,mBACEC,UAAU,WACVC,KAAI,wBAAYF,QAAZ,IAAYA,OAAZ,EAAYA,EAAMF,OAFxB,gBAIGE,QAJH,IAIGA,OAJH,EAIGA,EAAMJ,QCJEO,EAA4B,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACvC,0BACE,UAASA,EAAKT,GACdM,UAAWI,IAAW,WACpB,CAAE,sBAAuBD,EAAKE,YAHlC,UAKE,oBAAIL,UAAU,kBAAd,SAAiCG,EAAKG,QACtC,cAAC,EAAD,CAAUP,KAAMI,EAAKJ,WCPZQ,EAA4B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACvC,yBAASR,UAAU,WAAnB,SACGQ,EAAMC,KAAI,SAACN,GAAD,OACT,cAAC,EAAD,CAAwBA,KAAMA,GAAfA,EAAKT,UCI1B,IAAMc,ECfS,CACb,CACEd,GAAI,EACJY,MAAO,qBACPD,WAAW,EACXK,OAAQ,GAEV,CACEhB,GAAI,GACJY,MAAO,qBACPD,WAAW,EACXK,OAAQ,GAEV,CACEhB,GAAI,EACJY,MAAO,qCACPD,WAAW,EACXK,OAAQ,IDF0BD,KAAI,SAAAN,GAAI,kCACzCA,GADyC,IAE5CJ,MAReW,EAQDP,EAAKO,OAPCC,EAAgBC,MAAK,SAAAb,GAAI,OAAIA,EAAKL,KAAOgB,MAEvC,QAHxB,IAAiBA,KAWXG,EAAgBF,EAAgBF,KAAI,SAAAV,GAAI,sBACzCA,MAGQe,EAAM,WACjB,MAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAAgCJ,oBAAS,GAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KAEA,OACE,sBAAKrB,UAAU,MAAf,UACE,+CAEA,uBACEsB,OAAO,aACPC,OAAO,OACPC,SAAU,SAACC,GAGT,GAFAA,EAAMC,iBACNL,GAAY,GACRL,GAAcE,EAAY,CAC5B,IAAMS,EAAed,EAAMD,MAAK,SAAAb,GAAI,OAAIA,EAAKJ,OAASqB,KAChDY,EAAQC,KAAKC,IAAL,MAAAD,KAAI,YAAQrB,EAAMC,KAAI,SAAAN,GAAI,OAAIA,EAAKT,QAC3CS,EAAY,CAChBT,GAAIkC,EAAQ,EACZtB,MAAOY,EACPR,QAAoB,OAAZiB,QAAY,IAAZA,OAAA,EAAAA,EAAcjC,KAAM,KAC5BK,KAAM4B,GAAgB,KACtBtB,WAAW,GAGbG,EAAMuB,KAAK5B,GACXc,EAAc,IACdE,EAAc,IACdE,GAAY,KApBlB,UAwBE,sBAAKrB,UAAU,QAAf,UACE,uBAAOgC,QAAQ,aAAf,qBACA,uBACEC,KAAK,OACLvC,GAAG,aACH,UAAQ,aACRwC,YAAY,gBACZC,MAAOjB,EACPkB,SAAU,SAACX,GAAD,OAAYN,EAAcM,EAAMY,OAAOF,WAEhDjB,GAAcE,GACZ,sBAAMpB,UAAU,QAAhB,qCAGP,sBAAKA,UAAU,QAAf,UACE,uBAAOgC,QAAQ,aAAf,oBACA,yBACErC,KAAK,aACLD,GAAG,aACH,UAAQ,aACRyC,MAAOnB,EACPoB,SAAU,SAACX,GAAD,OAAYR,EAAcQ,EAAMY,OAAOF,QALnD,UAOE,wBACEA,MAAM,GACNG,UAAQ,EACRC,UAAQ,EAHV,2BAOC1B,EAAMJ,KAAI,SAACV,GAAD,OACT,wBAAsBoC,MAAOpC,EAAKJ,KAAlC,SACGI,EAAKJ,MADKI,EAAKL,WAMnBsB,GAAcI,GACb,sBAAMpB,UAAU,QAAhB,qCAGN,wBAAQiC,KAAK,SAAS,UAAQ,eAA9B,oBAKF,cAAC,EAAD,CAAUzB,MAAOA,QEpGvBgC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.f049a959.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React from 'react';\nimport { User } from '../../types/user';\n\ninterface Props {\n  user: User | null;\n}\n\nexport const UserInfo:React.FC<Props> = ({ user }) => (\n  <a\n    className=\"UserInfo\"\n    href={`mailto:${user?.email}`}\n  >\n    {user?.name}\n  </a>\n);\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/todo';\nimport { UserInfo } from '../UserInfo';\n\ninterface Props {\n  todo: Todo;\n}\nexport const TodoInfo: React.FC<Props> = ({ todo }) => (\n  <article\n    data-id={todo.id}\n    className={classNames('TodoInfo',\n      { 'TodoInfo--completed': todo.completed })}\n  >\n    <h2 className=\"TodoInfo__title\">{todo.title}</h2>\n    <UserInfo user={todo.user} />\n  </article>\n);\n","import React from 'react';\nimport { Todo } from '../../types/todo';\nimport { TodoInfo } from '../TodoInfo/TodoInfo';\n\ninterface Props {\n  todos: Todo[];\n}\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map((todo) => (\n      <TodoInfo key={todo.id} todo={todo} />\n    ))}\n  </section>\n);\n","import { useState } from 'react';\nimport './App.scss';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nimport { TodoList } from './components/TodoList';\nimport { Todo } from './types/todo';\nimport { User } from './types/user';\n\nfunction getUser(userId: number): User | null {\n  const foundedUser = usersFromServer.find(user => user.id === userId);\n\n  return foundedUser || null;\n}\n\nconst todos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUser(todo.userId),\n}));\n\nconst users: User[] = usersFromServer.map(user => ({\n  ...user,\n}));\n\nexport const App = () => {\n  const [userSelect, setUserSelect] = useState('');\n  const [titleInput, setTitleInput] = useState('');\n  const [isSubmit, setIsSubmit] = useState(false);\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={(event) => {\n          event.preventDefault();\n          setIsSubmit(true);\n          if (userSelect && titleInput) {\n            const selectedUser = users.find(user => user.name === userSelect);\n            const maxId = Math.max(...todos.map(todo => todo.id));\n            const todo:Todo = {\n              id: maxId + 1,\n              title: titleInput,\n              userId: selectedUser?.id || null,\n              user: selectedUser || null,\n              completed: false,\n            };\n\n            todos.push(todo);\n            setUserSelect('');\n            setTitleInput('');\n            setIsSubmit(false);\n          }\n        }}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"titleInput\">Title: </label>\n          <input\n            type=\"text\"\n            id=\"titleInput\"\n            data-cy=\"titleInput\"\n            placeholder=\"Enter a title\"\n            value={titleInput}\n            onChange={(event) => (setTitleInput(event.target.value))}\n          />\n          {(!titleInput && isSubmit)\n            && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"userSelect\">User: </label>\n          <select\n            name=\"userSelect\"\n            id=\"userSelect\"\n            data-cy=\"userSelect\"\n            value={userSelect}\n            onChange={(event) => (setUserSelect(event.target.value))}\n          >\n            <option\n              value=\"\"\n              disabled\n              selected\n            >\n              Choose a user\n            </option>\n            {users.map((user) => (\n              <option key={user.id} value={user.name}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n\n          {(!userSelect && isSubmit)\n           && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}